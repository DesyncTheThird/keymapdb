{% from "macros/yes_no_switch_field.njk" import YesNo %}
{# NOTE: `keymap-filter` is not a class used for styling. It is a class used to group together input elements responsible for keymap-filtering, so that it is easy to iterate over them in JS #}

<fieldset>
    <legend>Key Count</legend>
    {# Dummy input used to simply fill in the blank for NoScript users #}
    {# The real dual-slider is created in assets/js/dual_sliders_conf.js #}
    <div class="keymap-filter flex" name="keyCount" id="keyCountSlider">1<input type="range" min="1" max="90" value="90">90</input></div>
</fieldset>

<br>

<fieldset class="flex flex-col">
    <legend>Firmware</legend>
        {% for firmware in collections.posts | mapToDbField("firmwares") | flatten | sort | uniq %}
        <div class="inline-flex mt-3">
            <input type="radio"
                   name="firmwares"
                   value="{{ firmware }}"
                   id="{{ firmware }}-radio"
                   onclick="updatePostGrid(this)"
                   class="keymap-filter form-radio h-5 w-5 text-blue-500 border-gray-300 transition duration-100 ease-in-out shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none focus:ring-opacity-50 focus:ring-offset-0  disabled:opacity-50 disabled:cursor-not-allowed">
            <label for="{{ firmware }}-radio" class="ml-2 text-gray-700">{{ firmware }}
            </label>
        </div>
        {% endfor %}
</fieldset>

<br>

<fieldset class="mb-3 xl:w-96">
    <legend class="form-check-label inline-block text-gray-800" id="baseLayoutSelectionLegend">
      Base layout family
    </legend>
    <select id="baseLayoutSelection" name="baseLayouts" onchange="updatePostGrid(this)" class="keymap-filter form-select
      block
      px-3
      py-1.5
      text-base
      font-normal
      text-gray-700
      bg-white bg-clip-padding bg-no-repeat
      border border-solid border-gray-300
      rounded
      transition
      ease-in-out
      m-0
      focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none" 
      aria-labelledby="baseLayoutSelectionLegend">
        <option value="" selected>Any</option>
        {% for baseLayoutName in collections.posts | mapToDbField("baseLayouts") | flatten | sort | uniq  %}
        <option value="{{ baseLayoutName }}">{{ baseLayoutName }}</option>
        {% endfor %}
    </select>
</fieldset>

<br>

<fieldset class="mb-3 xl:w-96">
    <legend class="form-check-label inline-block text-gray-800" id="keyboardSelectionLegend">
      Keyboard
    </legend>
    <select id="keyboardSelection" name="keyboard" onchange="updatePostGrid(this)" class="keymap-filter form-select
          block
          px-3
          py-1.5
          text-base
          font-normal
          text-gray-700
          bg-white bg-clip-padding bg-no-repeat
          border border-solid border-gray-300
          rounded
          transition
          ease-in-out
          m-0
          focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none" 
          aria-labelledby="keyboardSelectionLegend">
        <option value="" selected>Any</option>
        {# FIXME This procedure of sorting entries by keyboard name and
        dropping duplicates could probably be sped up #}
        {% for keyboardName, keymapEntry in collections.posts | sort(false, false, "data.keyboard") | groupby("data.keyboard")  %}
            {# Don't list empty keyboard names (i.e. ""), sometimes used for keymaps that can work on a vast array of different keyboards #}
            {% if keyboardName | length > 0 -%} 
                <option value="{{ keyboardName }}">{{ keyboardName }}</option>
            {%- endif %}
        {% endfor %}
    </select>
</fieldset>

<br>

<fieldset class="flex flex-col">
    <legend>Stagger</legend>
    <label class="inline-flex mt-3">
        <input type="radio" name="stagger" value="row" onclick="updatePostGrid(this)" class="keymap-filter form-radio h-5 w-5 text-gray-600">
        <span class="ml-2 text-gray-700">row</span>
    </label>

    <label class="inline-flex mt-3">
        <input type="radio" name="stagger" value="columnar" onclick="updatePostGrid(this)" class="keymap-filter form-radio h-5 w-5 text-gray-600">
        <span class="ml-2 text-gray-700">columnar</span>
    </label>

    <label class="inline-flex mt-3">
        <input type="radio" name="stagger" value="ortholinear" onclick="updatePostGrid(this)" class="keymap-filter form-radio h-5 w-5 text-gray-600">
        <span class="ml-2 text-gray-700">ortholinear</span>
    </label>
</fieldset>

<br>

{{ YesNo("Split", "isSplit") }}

<br>

<fieldset class="block text-left">
    <legend>Language(s) (Ctrl+Click to select more than one)</legend>
    <select name="languages" id="languages-multi-select" onchange="updatePostGrid(this)" class="keymap-filter form-multiselect block w-full mt-1 border-2"
        aria-label="Languages selection" multiple>
       {% for language in collections.posts | mapToDbField("languages") | flatten | sort | uniq  %}
           <option value="{{ language }}">{{ language }}</option>
       {% endfor %}
     </select>
</fieldset>

<br>

<fieldset class="flex flex-col">
    <legend>OS</legend>
    {% for OS in ["Windows", "MacOS", "Linux"] %}
        <label class="inline-flex items-center mt-3">
            <input type="checkbox" name="OS" value="{{ OS }}" 
            onclick="updatePostGrid(this)" class="keymap-filter form-checkbox h-5 w-5 text-gray-600">
            <span class="ml-2 text-gray-700">{{ OS }}</span>
        </label>
    {% endfor %}
</fieldset>

<br>

<fieldset class="flex flex-col">
    <legend>Keybinding Scheme</legend>
    {% for keybindingsScheme in collections.posts | mapToDbField("keybindings") | flatten | sort | uniq %}
        <label class="inline-flex items-center mt-3">
            <input type="checkbox" name="keybindings" value="{{ keybindingsScheme }}" onclick="updatePostGrid(this)" class="keymap-filter form-checkbox h-5 w-5 text-gray-600">
            <span class="ml-2 text-gray-700">{{ keybindingsScheme }}</span>
        </label>
   {% endfor %}
</fieldset>

<br>

{{ YesNo("Letter(s) on thumb", "hasLetterOnThumb") }}

<br>

{{ YesNo("Rotary Encoder(s)", "hasRotaryEncoder") }}

<br>

<fieldset>
    <legend>Layer Count</legend>
    {# Dummy input used to simply fill in the blank for NoScript users #}
    <div class="keymap-filter flex" name="layerCount" id="layerCountSlider">1<input type="range" min="1" max="32" value="32">32</input></div>
</fieldset>

<br>

{{ YesNo("Combos", "isComboEnabled") }}

<br>

{{ YesNo("Tap dance", "isTapDanceEnabled") }}

<br>

{{ YesNo("Auto Shift", "isAutoShiftEnabled") }}

<br>

{{ YesNo("Home row mods", "hasHomeRowMods") }}

<br>

<div class="flex justify-between flex-wrap">
    {# See https://webhint.io/docs/user-guide/hints/hint-button-type/ for the merits of adding `type="button"` to a <button> #}
    <button type="button" onclick="resetSidebarFilters(true); toggleFullScreenSidebar();" class="button float-left mt-9">Reset filters</button>
    {# The "Apply filters" button is a bit misleading in terms of how 
    it technically works. The different filters are applied as soon as
    you make a selection (e.g. select a keyboard or a OS) so there is no
    need for an "Apply" button. However, the sidebar/filters menu is 
    shown in full-screen for mobile users so they don't see the live
    filtering of results and need a convenient way to minimise the
    filters-menu in order to look at the filtered results. #}
    <button type="button" onclick="toggleFullScreenSidebar()" class="button float-right mt-9 md:hidden">Apply filters</button>
</div>
